#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Group assignment 3 - ARK
\end_layout

\begin_layout Author
Martin Bjerregaard Jepsen - 251190
\begin_inset Newline newline
\end_inset

Rasmus Wriedt Larsen - 070290
\begin_inset Newline newline
\end_inset

Jonas Brunsgaard - 141185
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section*
G3 Implementing a simple microarchitecture
\end_layout

\begin_layout Subsection*
Introduction
\end_layout

\begin_layout Standard
In this assignment the team has been building the circuits for a micro processor.
 It is our perception, that this report and the enclosed zip archive answers
 all the questions asked in the third group assignment of the course.
 Thus we find the assignment to be fully answered.
\end_layout

\begin_layout Subsection*
Basics
\end_layout

\begin_layout Standard
Our microarchitecture is an implementation of a single-cycle processor as
 described in COD and illustrated on page 329.
\end_layout

\begin_layout Subsection*
Implementing I-instructions
\end_layout

\begin_layout Itemize
Updated the control, and reused the functionality provided by the ALU
\end_layout

\begin_layout Subsection*
Implementing Branch on not equal
\end_layout

\begin_layout Itemize
Extra control line (ZeroInvert)
\end_layout

\begin_layout Subsection*
Implementing jumps
\end_layout

\begin_layout Standard
Basic jumps are implemented as specified in COD on page 328.
 To implement the 
\begin_inset Formula $\texttt{jal}$
\end_inset

 instruction
\end_layout

\begin_layout Itemize
Control line as specified by the book
\end_layout

\begin_layout Itemize
Extra stuff to update $ra
\end_layout

\begin_layout Itemize
RegtoPC control line from ALU control to update PC
\end_layout

\begin_layout Subsection*
Testing the implementation
\end_layout

\begin_layout Standard
To test our processor we wrote up some Assembly test files using the MIPS
 instructions that we have implemented.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
These files can be found in the directory 'tests' in the zip package
\end_layout

\end_inset

 Afterwards we constructed a circuit
\begin_inset Foot
status open

\begin_layout Plain Layout
The circuit can be found in the file 'asm_to_ram.circ' which is part of the
 zip package 
\end_layout

\end_inset

 in Logisim converting the Assembly instructions to byte code.
 
\end_layout

\begin_layout Standard
The bytecode was then loaded into the PC ram and executed in Logisim by
 enable ticks.
 Afterwards we compared the values in the registers with the excepted values.
 If the register held the expected values we concluded that the instruction
 had been implemented correctly.
 All passed tests can be seen in the 'tests/testresults.txt' file.
\end_layout

\end_body
\end_document
